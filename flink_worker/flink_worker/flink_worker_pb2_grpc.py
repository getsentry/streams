# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from flink_worker import flink_worker_pb2 as flink__worker_dot_flink__worker__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in flink_worker/flink_worker_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FlinkWorkerServiceStub(object):
    """Flink Worker Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMessage = channel.unary_unary(
                '/flink_worker.FlinkWorkerService/ProcessMessage',
                request_serializer=flink__worker_dot_flink__worker__pb2.ProcessMessageRequest.SerializeToString,
                response_deserializer=flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.FromString,
                _registered_method=True)
        self.ProcessWatermark = channel.unary_unary(
                '/flink_worker.FlinkWorkerService/ProcessWatermark',
                request_serializer=flink__worker_dot_flink__worker__pb2.ProcessWatermarkRequest.SerializeToString,
                response_deserializer=flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.FromString,
                _registered_method=True)
        self.AddToWindow = channel.unary_unary(
                '/flink_worker.FlinkWorkerService/AddToWindow',
                request_serializer=flink__worker_dot_flink__worker__pb2.AddToWindowRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.TriggerWindow = channel.unary_unary(
                '/flink_worker.FlinkWorkerService/TriggerWindow',
                request_serializer=flink__worker_dot_flink__worker__pb2.TriggerWindowRequest.SerializeToString,
                response_deserializer=flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.FromString,
                _registered_method=True)


class FlinkWorkerServiceServicer(object):
    """Flink Worker Service
    """

    def ProcessMessage(self, request, context):
        """Process a single message and return a list of processed messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessWatermark(self, request, context):
        """Process a watermark and return a list of processed messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToWindow(self, request, context):
        """Add a message to a window (no return value)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TriggerWindow(self, request, context):
        """Trigger a window and return the accumulated messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FlinkWorkerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessMessage,
                    request_deserializer=flink__worker_dot_flink__worker__pb2.ProcessMessageRequest.FromString,
                    response_serializer=flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.SerializeToString,
            ),
            'ProcessWatermark': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessWatermark,
                    request_deserializer=flink__worker_dot_flink__worker__pb2.ProcessWatermarkRequest.FromString,
                    response_serializer=flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.SerializeToString,
            ),
            'AddToWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToWindow,
                    request_deserializer=flink__worker_dot_flink__worker__pb2.AddToWindowRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'TriggerWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.TriggerWindow,
                    request_deserializer=flink__worker_dot_flink__worker__pb2.TriggerWindowRequest.FromString,
                    response_serializer=flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'flink_worker.FlinkWorkerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('flink_worker.FlinkWorkerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FlinkWorkerService(object):
    """Flink Worker Service
    """

    @staticmethod
    def ProcessMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flink_worker.FlinkWorkerService/ProcessMessage',
            flink__worker_dot_flink__worker__pb2.ProcessMessageRequest.SerializeToString,
            flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessWatermark(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flink_worker.FlinkWorkerService/ProcessWatermark',
            flink__worker_dot_flink__worker__pb2.ProcessWatermarkRequest.SerializeToString,
            flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddToWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flink_worker.FlinkWorkerService/AddToWindow',
            flink__worker_dot_flink__worker__pb2.AddToWindowRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TriggerWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/flink_worker.FlinkWorkerService/TriggerWindow',
            flink__worker_dot_flink__worker__pb2.TriggerWindowRequest.SerializeToString,
            flink__worker_dot_flink__worker__pb2.ProcessMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
